etectedParams)
    Goto adaptersetup
configureadapter = +
    Ifstr $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "Cannot find component product key"
            goto fatalregistry
        Endif
    Endif
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif
    set KeyParameters = $($R2)
    CloseRegKey $($R1)
    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "Cannot find component service"
        goto fatalregistry
    endif
    set OldVersionExisted = $(TRUE )
    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}
    Set IOBaseChoice = 1
    EnumRegValue $(KeyParameters) ValueList
    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        Ifstr(i) $(ValueName) == "InterruptNumber"
            set IRQLevel = $(ValueData)
        else-Ifstr(i) $(ValueName) == "IOBaseAddress"
            set IOBaseChoice = $(ValueData)
        else-Ifstr(i) $(ValueName) == "MemoryMappedBaseAddress"
            set MemBaseAddrDec = $(ValueData)
        else-ifstr(i) $(ValueName) == "BusType"
            set BusInterfaceType = $(ValueData)
        else-ifstr(i) $(ValueName) == "BusNumber"
            set BusNumber = $(ValueData)
        endif
    EndForListDo
    ifint $(IOBaseChoice) == 768
        set IOBaseChoice = 1
    else-ifint $(IOBaseChoice) == 512
        set IOBaseChoice = 2
    endif
    Set Iox = ~($(IOADDR_Base_List),$(IOBaseChoice))
    Ifint $(Iox) == 0
        Set Iox = 1  
    Endif
    Set IOBaseAddress = *($(IOADDR_Addr_List),$(Iox))
    Debug-Output "OEMNADD2.INF: setting IOBaseAddress to: "$(IOBaseAddress)
adaptersetup =+
    Set IOBaseChoice = *($(IOADDR_Base_List),~($(IOADDR_Addr_List),$(IOBaseAddress)))
    Debug-Output "OEMNADD2.INF: setting IOBaseChoice to: "$(IOBaseChoice)
    Set MemBaseAddrHex = *($(MemBaseAddrHexList), ~($(MemBaseAddrDecList),+
                            $(MemBaseAddrDec)))
    Shell $(ParamInf) Param_ParameterConfidence
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Debug-Output "OEMNADE2.INF: parameter confidence too low to bypass configuration"
        Goto adapteroptions
    Endif
    Ifstr(i) $(DetectedCard) == TRUE
        Ifstr(i) $(!STF_INSTALL_MODE) != CUSTOM
            set BusInterfaceType = *($(!STF_NCDETINFO),5)
            set BusNumber = *($(!STF_NCDETINFO),6)
            Goto adapterverify
        Endif
    Endif
adapteroptions = +
    set from = adapteroptions
    ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
        ifstr(i) $(!AutoNetInterfaceType) != ""
            set BusInterfaceType = $(!AutoNetInterfaceType)
        else
            set BusInterfaceType = 1    
        endif
        ifstr(i) $(!AutoNetBusNumber) != ""
            set BusNumber = $(!AutoNetBusNumber)
        else
            set BusNumber = 0
        endif
        goto adapterverify
    endif
    read-syms FileDependentDlg$(!STF_LANGUAGE)
    ui start "InputDlg"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        set IRQLevel = $(Combo1Out)
        set MemBaseAddrHex = $(Combo2Out)
        set IOBaseChoice = *($(RadioOut),1)
        ui pop 1
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set CommonStatus = STATUS_USERCANCEL
        Debug-Output "OEMNADD2.INF: Action: exit. Bye."
        ui pop 1
        goto end
    else
        ui pop 1
        Debug-Output "OEMNADD2.INF: Action: unknown. Bye."
      
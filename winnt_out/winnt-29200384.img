ON_OPTIONS = { $(ProductNWWKSTAName), +
            $(ProductNWRDRName)}
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVNW.INF: ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        set Error = $($R0)
        set from = end
        set to = end
        goto nonfatalinfo
    else
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
    endif
    set DoWKSTA         = FALSE
    set DoRDR           = FALSE
    set DoNWLINK        = FALSE
    Ifstr(i) $(Option) == NWWKSTA
        set DoWKSTA     = TRUE
        set DoRDR       = TRUE
        set DoNWLINK    = TRUE
    Else-ifstr(i) $(Option) == RDR
        Set DoRDR = TRUE
    Else
        Debug-Output "OEMNSVWK.INF: Unrecognized option"
    Endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    GetDriveInPath NtDrive $(!STF_WINDOWSSYSPATH)
    Shell "" GetFilesSize
    set RequiredSize = $($R0)
    ForListDo $(VolumeList)
          set CurrentVolume = *($(VolumeList), $(#))
          set CurrentVolumeFree  = *($(VolumeFreeList), $(#))
          Ifstr(i) $(CurrentVolume) == $(NtDrive)
              set-mul CurrentVolumeFree = $(CurrentVolumeFree) 1024
              Ifint $(CurrentVolumeFree) < $(RequiredSize)
                  Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(NotEnoughSpace)
                  ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                  endif
                  goto end
              else
                  goto AfterCheckSpace
              endif
          EndIf
    EndForListDo
AfterCheckSpace = +
    Ifstr(i) $(DoCopy) == "YES"
        Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
        Ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Goto ShellCodeError
        Else-Ifstr(i) $($R0) == STATUS_FAILED
            Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                goto ShellCodeError
            endif
            set Error = $($R0)
            Goto fatal
        Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
            Goto successful
        Endif
        Set SrcDir = $($R1)
    Endif
    set NwlnkName = "NWLINKIPX"
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\NWLINKIPX" $(MAXIMUM_ALLOWED) BS_KeyServices
    Ifstr $(BS_KeyServices) == $(KeyNull)
        set NwlnkName = "NWLNKIPX"
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\NWLNKIPX" $(MAXIMUM_ALLOWED) BS_KeyServices
        Ifstr $(BS_KeyServices) == $(KeyNull)
            Shell "oemnxpip.inf" ReturnOptions $(!STF_LANGUAGE)
            ifstr(i) $($R0) == STATUS_SUCCESSFUL
                set OldStfSrcDir = $(!STF_SRCDIR_OVERRIDE)
                set !STF_SRCDIR_OVERRIDE = ""
                set NwlnkName = *($($R1),1)
                Shell "oemnxpip.inf" InstallOption $(!STF_LANGUAGE), *($($R1),1),+
                    $(SrcDir), $(AddCopy), "NO", $(DoConfig)
                set !STF_SRCDIR_OVERRIDE = $(OldStfSrcDir)
            else
                Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(InstallNWLINKFirst)
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
                endif
                goto end
            endif
        else
            CloseRegKey $(BS_KeyServices)
        endif
    else
        CloseRegKey $(BS_KeyServices)
    endif
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
    
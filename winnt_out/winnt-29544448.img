eDetection = TRUE
                set StartLabel = configureadapter
                Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
                        Debug-Output "Cannot configure the Novell 2000 driver software."
                        Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                                Debug-Output "ShellCode error: cannot get an error string."
                                goto ShellCodeError
                        endif
                        set Error = $($R0)
                        set from = end
                        set to = end
                        goto nonfatalinfo
                endif
    else
                set StartLabel = installadapter
                set OEM_ABANDON_OPTIONS = {}
                set OEM_ABANDON_SOFTWARE = FALSE
                set OEM_ABANDON_ON = TRUE
                set ActivateDetection = TRUE
    endif
    Debug-Output "OEMNADN2.INF: =================================================="
    Debug-Output "OEMNADN2.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNADN2.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    Debug-Output "OEMNADN2.INF: Option is: "$(Option)
    Debug-Output "OEMNADN2.INF: !STF_NCDETECT  is: "$(!STF_NCDETECT)
    Debug-Output "OEMNADN2.INF: !STF_NCOPTION  is: "$(!STF_NCOPTION)
    Debug-Output "OEMNADN2.INF: !STF_NCDETCARD is: "$(!STF_NCDETCARD)
    Debug-Output "OEMNADN2.INF: !STF_NCDETINFO is: "$(!STF_NCDETINFO)
    Debug-Output "OEMNADN2.INF: =================================================="
    Set DetectedCard = FALSE
    set PCMCIA = 1
    set CardType = 1
    Ifstr(i) $(ActivateDetection) != TRUE
        Goto skipdetection
    Endif
    Set TypeList = {{IRQ,IRQList,IRQValue},+
                    {PCMCIA, PCMCIAList, PCMCIA},+
                    {CARDTYPE, CardTypeList, CardType},+
                    {PCCARDATTRIBUTEMEM, PcCardAddressDecList, PcCardBaseValue},+
                    {IOADDR, IOBaseAddrDecList, IOBaseAddrValue}}
    Debug-Output "OEMNADN2.INF: Calling Param_BuildTypeLists"
    Shell $(ParamInf) Param_BuildTypeLists NE2000IBMCOMPAT $(TypeList)
    Set Status = $($R0)
    ifstr(i) $(Status) != STATUS_SUCCESSFUL
        Goto fataldetect
    Endif
    Debug-Output "OEMNADN2.INF: Calling Param_SetDefaults"
    Shell $(ParamInf) Param_SetDefaults {}
    Shell $(ParamInf) HexListFromDecList $(IOBaseAddrDecList)
    Set IOBaseAddrHexList = $($R0)
    Shell $(ParamInf) HexListFromDecList $(PcCardAddressDecList)
    Set PcCardAddressHexList = $($R0)
    Shell $(UtilityInf) SortList $(IRQList) TRUE FALSE
    Set IRQList = $($R0)
    Ifstr(i) $(!STF_NCDETECT) == YES
        Ifstr(i) $(!STF_NCOPTION) == "NE2000IBMCOMPAT"
           Set DetectedCard = TRUE
           Debug-Output "OEMNADN2.INF: Setting DetectedCard to TRUE"
        Endif
    Endif
skipdetection =+
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        CloseRegKey $(KeyProduct)
        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftware$(Option)Title),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif
           goto end
        else
           Shell $(UtilityInf), CardExistedDlg
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif
           ifstr(i) $($R1) != "OK"
               set CommonStatus = STATUS_USERCANCEL
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    endif
    Ifstr(i) $(DetectedCard) != TRUE
        Goto a
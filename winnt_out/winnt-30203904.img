	   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
				Shell  $(UtilityInf), AddValueList, $(HardNetCardKey), $(NewValueList)
				ifint $($ShellCode) != $(!SHELL_CODE_OK)
					goto ShellCodeError
				endif
				set NewValueList = {{CardType,$(NoTitle),$(!REG_VT_DWORD),5},+
								   {BusType,$(NoTitle),$(!REG_VT_DWORD),2},+
								   {MediaType,$(NoTitle),$(!REG_VT_DWORD),3},+
								   {EisaCompressedId,$(NoTitle),$(!REG_VT_DWORD),$(DEC300_1BYTE)},+
								   {BusNumber,$(NoTitle),$(!REG_VT_DWORD),*($(List1),$(#))},+
								   {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),*($(List2),$(#))},+
								   {RcvBuffCnt,$(NoTitle),$(!REG_VT_DWORD),*($(List3),$(#))},+
								   {BurstSize,$(NoTitle),$(!REG_VT_DWORD),*($(List4),$(#))},+
								   {XmtBuffCnt,$(NoTitle),$(!REG_VT_DWORD),*($(List5),$(#))},+
								   {FullDuplexEnable,$(NoTitle),$(!REG_VT_DWORD),*($(List6),$(#))},+
								   {RequestedTTRT,$(NoTitle),$(!REG_VT_DWORD),*($(List7),$(#))}}
		  Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
				ifint $($ShellCode) != $(!SHELL_CODE_OK)
					goto ShellCodeError
				endif
				set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
				set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
				set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
									{bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
									{class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
									{InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
				Shell  $(UtilityInf), AddValueList, $(HardNetRuleKey), $(NewValueList)
				ifint $($ShellCode) != $(!SHELL_CODE_OK)
					goto ShellCodeError
				endif
				CloseRegKey $(HardNetCardKey)
				CloseRegKey $(HardNetRuleKey)
				CloseRegKey $(HardParameterKey)
			endif
		EndForListDo
	goto writeparameters
writeparameters = +
	EndWait
	goto successful
bindingadapter =+
	set Error = "Binding: Sorry, not yet implemented."
	goto fatal
removeadapter = +
	Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
		Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
			$(ProductSoftwareName)
		ifint $($ShellCode) != $(!SHELL_CODE_OK)
			Debug-Output "ShellCode error"
			goto ShellCodeError
		endif
		set RegistryErrorIndex = $($R0)
		Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
			goto fatalregistry
		endif
	else
		Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
			$(ProductSoftwareName), $(!NTN_RegBase)
		ifint $($ShellCode) != $(!SHELL_CODE_OK)
			Debug-Output "ShellCode error"
			goto ShellCodeError
		endif
		set RegistryErrorIndex = $($R0)
		Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
			goto fatalregistry
		endif
	endif
	goto end
UpgradeSoftware = +
	ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
		OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
		Ifstr $(KeyProduct) != $(KeyNull)
			GetRegValue $(KeyProduct),"MajorVersion", VersionInfo
			set Version = *($(VersionInfo), 4)
			Shell $(UtilityInf), GetInfFileNameFromRegistry, $(KeyProduct)
			ifint $($ShellCode) != $(!SHELL_CODE_OK)
				Debug-Output "ShellCode error"
				goto ShellCodeError
			endif
			set !UG_Filename = $($R0)
			ifstr(i) $(!UG_Filename) != ""
				install "Install-Update"
				ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
					goto fatal
				endif
			endif
			SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
			SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
			ifint $(Version) != $(ProductVersion)
			endif
			CloseRegKey $(KeyProduct)
            OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Linkage" $(MAXIMUM_ALLOWED) LinkageKey
            ifstr(i) $(LinkageKey) != ""
                GetRegValue $(LinkageKey) Bind BindInfo
                ForListDo *($(BindInfo),4)
                    Split-String $($) "\" CardInfo
                    QueryListSize CardPos $(CardInfo)
                    OpenRegKey $(!RE
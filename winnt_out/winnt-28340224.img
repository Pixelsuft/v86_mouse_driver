  ui pop 1
                endif
             endif
             set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
             set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
             set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
                                 {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                                 {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
                                 {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)} }
             Shell  $(UtilityInf), AddValueList, $(HardNetRuleKey), $(NewValueList)
             CloseRegKey $(HardNetCardKey)
             CloseRegKey $(HardNetRuleKey)
             CloseRegKey $(HardParameterKey)
             ifint $($ShellCode) != $(!SHELL_CODE_OK)
                 goto ShellCodeError
             endif
             ifstr(i) $(DualPort) == TRUE
                set-add AddAdpCount = $(AddAdpCount),1
             endif
          EndForListDo
      endif
    EndForListDo
    goto writeparameters
writeparameters = +
    EndWait
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase)"\NetRules" +
            $(MAXIMUM_ALLOWED) NetRulesKey
        Ifstr $(NetRulesKey) == $(KeyNull)
            Debug-Output "UTILITY.INF: Could not open NetRules key"
            set RegistryErrorIndex = UNABLE_ACCESS_CONFIGURE_SERVICE
            goto ShellCodeError
        endif
        GetRegValue $(NetRulesKey), "InfOption", RA_InfOptionInfo
        set RA_InfOption = *($(RA_InfOptionInfo), 4)
        ifstr(i) $(RA_InfOption) == $(BonsaiString)
           goto RemoveSecondAdapter
        else-ifstr(i) $(RA_InfOption) == $(RodanString)
           goto RemoveSecondAdapter
        else
           goto RemoveOriginalAdapter
        endif
RemoveSecondAdapter = +
        Shell "", GetSecondAdapter, $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
        set PortTwo_RegBase = $($R1)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
              $(ProductSoftwareName), $(PortTwo_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
RemoveOriginalAdapter = +
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
              $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
    endif
    goto end
UpgradeSoftware = +
    ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) != $(KeyNull)
            install "Install-Update"
            ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
                goto fatal
            endif
            SetRegValue $(KeyProduct) {Majo